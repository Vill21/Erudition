import React, {useState, useRef, useEffect} from "react";
import useStateRef from "react-usestateref";
import swal from 'sweetalert2';

import {
  createSmartappDebugger,
  createAssistant,
  AssistantSmartAppCommand
} from "@sberdevices/assistant-client";
import { TextBox, Spinner, TextSkeleton, RectSkeleton } from '@sberdevices/plasma-ui';

import "./SApp.css";
import {Line} from './components/Line'

import axios from "axios";
import { IconInfo } from "@sberdevices/plasma-icons";
import { setRef } from "@sberdevices/plasma-core/utils";
const API_URL = "https://shielded-escarpment-91826.herokuapp.com/words/";

async function getWords() {
  const {data: words} = await axios.get(API_URL);
  return words;
}

async function updateWords(id, payload) {
  const {data: newWord} = await axios.put(`${API_URL}${id}`, payload);
  return newWord;
}

const initializeAssistant = (getState/*: any*/) => {
  if (process.env.NODE_ENV === "development") {
    return createSmartappDebugger({
      token: process.env.REACT_APP_TOKEN ?? "",
      initPhrase: `–ó–∞–ø—É—Å—Ç–∏ ${process.env.REACT_APP_SMARTAPP}`,
      getState,
    });
  }
  return createAssistant({ getState });
};

export const App = () => {
  const [words, setWords, wordsRef] = useStateRef([]); // –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ –∏–≥—Ä–µ
  const [index, setIndex, indexRef] = useStateRef(0); // –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const [points, setPoints, pointsRef] = useStateRef(0); // –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
  const [indArr, setArr, indArrRef] = useStateRef([]); // –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É–∫–≤
  const assistant = useRef(undefined); // —Å–±–µ—Ä–æ–≤—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
  const assistantType = useRef("formal"); // unnecessary
  const [show, setShow] = useState(false); // —Ñ–ª–∞–≥ (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º / –Ω–µ—Ç)
  const tries = useRef(0); // —á–∏—Å–ª–æ, —É—à–µ–¥—à–µ–µ –Ω–∞ —Ä–∞–∑–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const [lives, setLives, livesRef] = useStateRef(0); // –¥–æ–ø –∂–∏–∑–Ω–∏ –∏–≥—Ä–æ–∫–∞
  
  //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
  useEffect(() => {
    assistant.current = initializeAssistant(() => getStateForAssistant());
    //–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫ —Ä–∞–±–æ—Ç–µ.
    assistant.current.on("start", (event) => {
      console.log(`assistant.on(start)`, event);
    });
    //–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞. 
    //–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ appInitialData, –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–º–∞—Ä—Ç–∞–ø–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ getInitialData().
    assistant.current.on("data", (event) => {
      if (event.type == "character") {
        assistantType.current = event.character.id;
      }
      if(event.assistant){
        if(event.assistant == "official"){
          assistantType.current = "formal"
        }
        else {
          assistantType.current = "informal"
        }
      }
      console.log(`assistant.on(data)`, event);
      const { action } = event;
      dispatchAssistantAction(action);
    });
  }, [])

  useEffect(() => {
    const fetchAndSetWords = async () => {
      const _words = await getWords();
      _words.sort(() => Math.random() - 0.5);
      console.log(_words);
      setWords(_words);
    }
    fetchAndSetWords();
  }, [])

  const getStateForAssistant = () => {
    console.log('getStateForAssistant: this.state:', pointsRef?.current)
    const state = {
      item_selector: {
        //–°–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
        items: {
            word: wordsRef?.current?.[indexRef?.current]?.["word"],
            question: wordsRef?.current?.[indexRef?.current]?.["question"],
            future: wordsRef?.current?.[indexRef?.current + 1]?.["question"],
            point: pointsRef?.current,
            lives: livesRef?.current,
            arr: indArrRef?.current,
            speech: assistantType?.current, 
            possibility: pointsRef?.current,
            try: tries?.current,
            length: wordsRef?.current?.[indexRef?.current]?.["word"].length
          },
      },
    };
    console.log('getStateForAssistant: state:', state)
    return state;
  }

  //—Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const dispatchAssistantAction = (action) => {
    console.log('dispatchAssistantAction', action);
      if (action) {
      switch (action.type) {
        case 'guess_word':
          //–≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
          return guess_word(action);
        case 'add_life':
          return add_life();
        case 'open_letter':
          return open_letter(action);  
        case 'init':
          return init();  
        case 'ease':
          return ease(action); 
        case 'help':
          return help();
        default:
          throw new Error();
      }
    }
  }

  const handleOnClick = (action_id, asked) => {
    console.log("START")
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±—ç–∫–µ–Ω–¥
    assistant?.current?.sendData({ 
      action: 
        { 
          action_id: action_id, 
          payload: {
            asked: asked
          } 
        }
      });
  };

  const init = () => {
    handleOnClick('say_question', '–û–≥–ª–∞—Å–∏ –≤–æ–ø—Ä–æ—Å')
  }

  const ease = (action) => {
    const flag = action.body;
    if (flag === true) {
      setShow(true);
      setTimeout(() => { 
        const newIndex = indexRef?.current + 1;
        tries.current = 0;
        setIndex(newIndex);
        setArr([]);
        handleOnClick('say_question', '–û–≥–ª–∞—Å–∏ –≤–æ–ø—Ä–æ—Å');
        setShow(false);
       }, 4500);
    } else if (flag === false) {
      tries.current = 0;
    } else if (flag === 'skip') {
      setShow(true);
      tries.current = 0;
      if (livesRef?.current > 0) {
        let life = livesRef?.current - 1;
        setLives(life);
      } else {
        setPoints(0);
      }
      setTimeout(() => { 
        const newIndex = indexRef?.current + 1;
        setIndex(newIndex);
        setArr([]);
        handleOnClick('say_question', '–û–≥–ª–∞—Å–∏ –≤–æ–ø—Ä–æ—Å');
        setShow(false);
       }, 4500);
    }
  }

  const txt_help = `<div style="text-align:left;">‚¶Å –ó–∞ –∫–∞–∂–¥–æ–µ —É–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–±–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1.<br>

    ‚¶Å –ó–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–±–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω—É–ª—è.<br>

    ‚¶Å –ó–∞ 2 –æ—á–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–±–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –∏–∫–æ–Ω–∫–æ–π —Å–µ—Ä–¥—Ü–∞) –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–±–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞: –¥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∂–∏–∑–Ω—å).<br>

    ‚¶Å –ó–∞ 1 –æ—á–∫–æ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–±–æ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –±—É–∫–≤—É —Å–ª–æ–≤–∞ (–∫–æ–º–∞–Ω–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–∫—Ä–æ–π –±—É–∫–≤—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –æ–¥–∏–Ω).<br>

    ‚¶Å –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–∞–¥–∫—É (–∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ—á–∏—Ç–∞–π –∑–∞–≥–∞–¥–∫—É).<br>
    
    ‚¶Å –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –µ–≥–æ –æ—Ç–≥–∞–¥–∞—Ç—å (–∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–ø—É—Å—Ç–∏). –≠—Ç–æ —Å—Ç–æ–∏—Ç 1 –∂–∏–∑–Ω—å –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–±–æ (–µ—Å–ª–∏ –∂–∏–∑–Ω–µ–π –Ω–µ—Ç).<br></div>`;
  
  const help = () => {
    swal.fire({html: txt_help, title: "–°–ø—Ä–∞–≤–∫–∞", showConfirmButton: false, showCloseButton: true});
  }

  //—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  const guess_word = (action) => {
    const guessed = action.isRight;
    
    if (guessed === true) {
      swal.fire({title: "–í–µ—Ä–Ω–æ!", text :`–°–ª–æ–≤–æ: ${wordsRef?.current?.[indexRef?.current]?.["word"]}`, icon: "success", timer: 3000});
      const newIndex = indexRef?.current + 1;
      setIndex(newIndex);
      const point = pointsRef?.current + 1;
      setArr([]);
      setPoints(point);
      tries.current = 0;
    } else if (livesRef?.current > 0) {
      let life = livesRef?.current - 1;
      setLives(life);
    }else {
      swal.fire({text: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :(", icon: "error", timer: 3000});
      setPoints(0);
      tries.current += 1;
      if (tries.current >= 8) handleOnClick('ask', '–ø–æ–º–æ—â—å');
    }
  }

  const add_life = () => {
      let life = livesRef?.current + 1;
      setLives(life);
      const point = pointsRef?.current - 2;
      setPoints(point);
  }

  const open_letter = (action) => {
    const id = action.id;
    const arr = indArrRef?.current;
    arr.push(id);
    setArr(arr);
    const point = pointsRef?.current - 1;
    setPoints(point);
  }
  
  if(wordsRef?.current?.[indexRef?.current]?.["word"]){
  return (
    <div className="content">
      <span className="contentDiv">
        <div style = {{ "display": "flex", "justifyContent": "space-between"}}>
          <label className="string" />
          <label className="texts text1">–£–≥–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥: {points} üí∞</label>
          <button className="info" view="clear" onClick={help}><label>?</label></button>
        </div>
      </span>
      <div className="mainbox">
      <label className="shine-button">
          <label className="texts">{lives}</label>
          <svg class="heart" viewBox="0 0 32 29.6">
            <path d="M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2
	          c6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z"/>
          </svg>
        </label>
      <TextBox 
        title="–ó–∞–≥–∞–¥–∫–∞:" 
        size="l" 
        subTitle={wordsRef?.current?.[indexRef?.current]?.["question"]} 
        className="texts text2"
        style={{margin: "2% 0 0 0"}}
        />
      </div>
        <div className="resolut"><Line word={wordsRef?.current?.[indexRef?.current]?.["word"]} indArr={indArr} show={show}/></div>
    </div>
  );
  }
  else{
    return(
      <div className="content">
      <div>
      <TextSkeleton size="headline1" width="20"/>
      </div>
      <div className="resolut"><span><RectSkeleton className="rectsk"/><RectSkeleton className="rectsk"/><RectSkeleton className="rectsk"/><RectSkeleton className="rectsk"/><RectSkeleton className="rectsk"/></span></div>
      <TextSkeleton size="headline1" width="20" lines={2} style={{"marginTop": "4%"}}/>
    </div>
    );
  };
}
