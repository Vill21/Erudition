{"version":3,"sources":["components/Line.jsx","SApp.jsx","reportWebVitals.ts","styles/Global.jsx","index.tsx"],"names":["Line","props","word","openedInds","indArr","show","className","split","map","item","index","find","element","ind","array","API_URL","getWords","a","axios","get","words","data","App","useStateRef","setWords","wordsRef","setIndex","indexRef","points","setPoints","pointsRef","setArr","indArrRef","assistant","useRef","undefined","assistantType","useState","setShow","tries","lives","setLives","livesRef","useEffect","getState","current","getStateForAssistant","createAssistant","on","event","console","log","type","character","id","action","dispatchAssistantAction","_words","sort","Math","random","fetchAndSetWords","state","item_selector","items","question","future","point","arr","speech","possibility","try","length","guess_word","add_life","open_letter","init","ease","help","Error","handleOnClick","action_id","asked","sendData","payload","flag","body","setTimeout","newIndex","life","swal","text","title","isRight","icon","timer","push","class","viewBox","d","view","onClick","size","subTitle","style","margin","width","lines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","background","gradient","ThemeSber","darkSber","GlobalStyle","darkJoy","darkEva","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945a2079.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport \"../SApp.css\";\r\n\r\n//компонент для отрисовки угадываемого слова\r\nexport const Line = (props) => {\r\n    //ответ (верное слово)\r\n    const word = props.word || \"\";\r\n    //флаг конца отгадывания\r\n    const openedInds = props.indArr;\r\n\r\n    const show = props.show;\r\n\r\n    return (\r\n        <span className=\"container\">\r\n            {   \r\n                word.split(\"\").map((item, index) => {\r\n                    var isIn = openedInds.find((element, ind, array) => {\r\n                        return (element - 1) === index;\r\n                    });\r\n                    if (isIn || show) {\r\n                        return (\r\n                            <label className=\"word\" key={index}>{item}</label>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <label className=\"word\" key={index}>{}</label>\r\n                        );\r\n                    }\r\n                }) \r\n            }\r\n        </span>\r\n    );\r\n} ","import React, {useState, useRef, useEffect} from \"react\";\r\nimport useStateRef from \"react-usestateref\";\r\nimport swal from 'sweetalert';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  AssistantSmartAppCommand\r\n} from \"@sberdevices/assistant-client\";\r\nimport { TextBox, Spinner, TextSkeleton, RectSkeleton, Button } from '@sberdevices/plasma-ui';\r\n\r\nimport \"./SApp.css\";\r\nimport {Line} from './components/Line'\r\n\r\nimport axios from \"axios\";\r\nimport { IconInfo } from \"@sberdevices/plasma-icons\";\r\nimport { setRef } from \"@sberdevices/plasma-core/utils\";\r\nconst API_URL = \"https://shielded-escarpment-91826.herokuapp.com/words/\";\r\n\r\nasync function getWords() {\r\n  const {data: words} = await axios.get(API_URL);\r\n  return words;\r\n}\r\n\r\nasync function updateWords(id, payload) {\r\n  const {data: newWord} = await axios.put(`${API_URL}${id}`, payload);\r\n  return newWord;\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\nexport const App = () => {\r\n  const [words, setWords, wordsRef] = useStateRef([]);\r\n  const [index, setIndex, indexRef] = useStateRef(0);\r\n  const [points, setPoints, pointsRef] = useStateRef(0);\r\n  const [indArr, setArr, indArrRef] = useStateRef([]);\r\n  const assistant = useRef(undefined);\r\n  const assistantType = useRef(\"formal\");\r\n  const [show, setShow] = useState(false);\r\n  const tries = useRef(0);\r\n  const [lives, setLives, livesRef] = useStateRef(0);\r\n  \r\n  //инициализирует голосовой ассистент\r\n  useEffect(() => {\r\n    assistant.current = initializeAssistant(() => getStateForAssistant());\r\n    //Осуществляет подписку на событие готовности ассистента к работе.\r\n    assistant.current.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n    //Осуществляет подписку на событие получения данных с бэкенда. \r\n    //Получает команды из appInitialData, если при запуске смартапа не была вызвана команда getInitialData().\r\n    assistant.current.on(\"data\", (event) => {\r\n      if (event.type == \"character\") {\r\n        assistantType.current = event.character.id;\r\n      }\r\n      if(event.assistant){\r\n        if(event.assistant == \"official\"){\r\n          assistantType.current = \"formal\"\r\n        }\r\n        else {\r\n          assistantType.current = \"informal\"\r\n        }\r\n      }\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event;\r\n      dispatchAssistantAction(action);\r\n    });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchAndSetWords = async () => {\r\n      const _words = await getWords();\r\n      _words.sort(() => Math.random() - 0.5);\r\n      console.log(_words);\r\n      setWords(_words);\r\n    }\r\n    fetchAndSetWords();\r\n  }, [])\r\n\r\n  const getStateForAssistant = () => {\r\n    console.log('getStateForAssistant: this.state:', pointsRef?.current)\r\n    const state = {\r\n      item_selector: {\r\n        //Список соответствий между голосовыми командами и действиями в приложении.\r\n        items: {\r\n            word: wordsRef?.current?.[indexRef?.current]?.[\"word\"],\r\n            question: wordsRef?.current?.[indexRef?.current]?.[\"question\"],\r\n            future: wordsRef?.current?.[indexRef?.current + 1]?.[\"question\"],\r\n            point: pointsRef?.current,\r\n            lives: livesRef?.current,\r\n            arr: indArrRef?.current,\r\n            speech: assistantType?.current, \r\n            possibility: pointsRef?.current,\r\n            try: tries?.current,\r\n            length: wordsRef?.current?.[indexRef?.current]?.[\"word\"].length\r\n          },\r\n      },\r\n    };\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;\r\n  }\r\n\r\n  //распознает запросы для голосового ассистента\r\n  const dispatchAssistantAction = (action) => {\r\n    console.log('dispatchAssistantAction', action);\r\n      if (action) {\r\n      switch (action.type) {\r\n        case 'guess_word':\r\n          //вызывает функцию в ответ на распознанное действие\r\n          return guess_word(action);\r\n        case 'add_life':\r\n          return add_life();\r\n        case 'open_letter':\r\n          return open_letter(action);  \r\n        case 'init':\r\n          return init();  \r\n        case 'ease':\r\n          return ease(action); \r\n        case 'help':\r\n          return help();\r\n        default:\r\n          throw new Error();\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOnClick = (action_id, asked) => {\r\n    console.log(\"START\")\r\n    // Отправка сообщения ассистенту с фронтенд.\r\n    // Структура может меняться на усмотрение разработчика, в зависимости от бэкенд\r\n    assistant?.current?.sendData({ \r\n      action: \r\n        { \r\n          action_id: action_id, \r\n          payload: {\r\n            asked: asked\r\n          } \r\n        }\r\n      });\r\n  };\r\n\r\n  const init = () => {\r\n    handleOnClick('say_question', 'Огласи вопрос')\r\n  }\r\n\r\n  const ease = (action) => {\r\n    const flag = action.body;\r\n    if (flag === true) {\r\n      setShow(true);\r\n      setTimeout(() => { \r\n        const newIndex = indexRef?.current + 1;\r\n        setIndex(newIndex);\r\n        setArr([]);\r\n        handleOnClick('say_question', 'Огласи вопрос');\r\n        setShow(false);\r\n       }, 4500);\r\n    } else if (flag === false) {\r\n      tries.current = 0;\r\n    } else if (flag === 'skip') {\r\n      setShow(true);\r\n      if (livesRef?.current > 0) {\r\n        let life = livesRef?.current - 1;\r\n        setLives(life);\r\n      } else {\r\n        setPoints(0);\r\n      }\r\n      setTimeout(() => { \r\n        const newIndex = indexRef?.current + 1;\r\n        setIndex(newIndex);\r\n        setArr([]);\r\n        handleOnClick('say_question', 'Огласи вопрос');\r\n        setShow(false);\r\n       }, 4500);\r\n    }\r\n  }\r\n\r\n  const txt_help = `⦁ За каждое угаданное слово счетчик комбо увеличивается на 1.\r\n\r\n    ⦁ За неправильно угаданное слово счетчик комбо сбрасывается до нуля.\r\n\r\n    ⦁ За 2 очка счетчика комбо можно купить допонительную жизнь. Дополнительная жизнь (отображается рядом с иконкой сердца) предотвращает сброс счетчика комбо в случае неправильного ответа (команда: дай дополнительную жизнь). \r\n\r\n    ⦁ За 1 очко счетчика комбо можно открыть любую букву слова (команда, например: открой букву на позиции один).\r\n\r\n    ⦁ Можно попросить ассистента прочитать загадку (команда: прочитай загадку)\r\n    \r\n    ⦁ Можно пропустить слово, если не получается его отгадать (команда: пропусти). Это стоит 1 жизнь или сбрасывает счетчик комбо (если жизней нет).`;\r\n\r\n  const help = () => {\r\n    swal({text: txt_help, title: \"Справка\"});\r\n  }\r\n\r\n  //функция обработчик введенного слова\r\n  const guess_word = (action) => {\r\n    const guessed = action.isRight;\r\n    \r\n    if (guessed === true) {\r\n      swal({title: \"Верно!\", text :`Слово: ${wordsRef?.current?.[indexRef?.current]?.[\"word\"]}`, icon: \"success\", timer: 3000});\r\n      const newIndex = indexRef?.current + 1;\r\n      setIndex(newIndex);\r\n      const point = pointsRef?.current + 1;\r\n      setArr([]);\r\n      setPoints(point);\r\n      tries.current = 0;\r\n    } else if (livesRef?.current > 0) {\r\n      let life = livesRef?.current - 1;\r\n      setLives(life);\r\n    }else {\r\n      swal({text: \"Попробуйте снова :(\", icon: \"error\", timer: 3000});\r\n      setPoints(0);\r\n      tries.current += 1;\r\n      if (tries.current >= 4) handleOnClick('ask', 'помощь');\r\n    }\r\n  }\r\n\r\n  const add_life = () => {\r\n      let life = livesRef?.current + 1;\r\n      setLives(life);\r\n      const point = pointsRef?.current - 2;\r\n      setPoints(point);\r\n  }\r\n\r\n  const open_letter = (action) => {\r\n    const id = action.id;\r\n    const arr = indArrRef?.current;\r\n    arr.push(id);\r\n    setArr(arr);\r\n    const point = pointsRef?.current - 1;\r\n    setPoints(point);\r\n  }\r\n  \r\n  if(wordsRef?.current?.[indexRef?.current]?.[\"word\"]){\r\n  return (\r\n    <div className=\"content\">\r\n      <span className=\"contentDiv\"><label className=\"texts text1\">Угаданные подряд: {points}</label>\r\n      <label className=\"shine-button\"><label className=\"texts\">{lives}</label><svg class=\"heart\" viewBox=\"0 0 32 29.6\">\r\n  <path d=\"M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2\r\n\tc6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z\"/></svg></label><Button className=\"info\" view=\"clear\" onClick={help}><IconInfo className=\"info\"/></Button>\r\n      </span>\r\n      <TextBox \r\n        title=\"Загадка:\" \r\n        size=\"l\" \r\n        subTitle={wordsRef?.current?.[indexRef?.current]?.[\"question\"]} \r\n        className=\"texts text2\"\r\n        style={{margin: \"2% 0 0 0\"}}\r\n        />\r\n        <div className=\"resolut\"><Line word={wordsRef?.current?.[indexRef?.current]?.[\"word\"]} indArr={indArr} show={show}/></div>\r\n    </div>\r\n  );\r\n  }\r\n  else{\r\n    return(\r\n      <div className=\"content\">\r\n      <div>\r\n      <TextSkeleton size=\"headline1\" width=\"20\"/>\r\n      </div>\r\n      <div className=\"resolut\"><span><RectSkeleton className=\"rectsk\"/><RectSkeleton className=\"rectsk\"/><RectSkeleton className=\"rectsk\"/><RectSkeleton className=\"rectsk\"/><RectSkeleton className=\"rectsk\"/></span></div>\r\n      <TextSkeleton size=\"headline1\" width=\"20\" lines={2} style={{\"marginTop\": \"4%\"}}/>\r\n    </div>\r\n    );\r\n  };\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport { darkSber, darkEva, darkJoy } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeSber = createGlobalStyle(darkSber);\r\nconst ThemeJoy = createGlobalStyle(darkJoy);\r\nconst ThemeEva = createGlobalStyle(darkEva);\r\n\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeSber />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./SApp\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './styles/Global'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}