{"version":3,"sources":["components/Line.jsx","SApp.jsx","reportWebVitals.ts","styles/Global.jsx","index.tsx"],"names":["Line","props","word","openedInds","indArr","className","split","map","item","index","find","element","ind","array","API_URL","getWords","a","axios","get","words","data","App","useStateRef","setWords","wordsRef","setIndex","indexRef","points","setPoints","pointsRef","setArr","indArrRef","assistant","useRef","undefined","assistantType","lives","setLives","livesRef","useEffect","getState","current","getStateForAssistant","createAssistant","on","event","console","log","type","character","id","action","dispatchAssistantAction","_words","sort","Math","random","fetchAndSetWords","state","item_selector","items","question","future","point","arr","speech","possibility","guess_word","add_life","open_letter","init","Error","handleOnClick","action_id","asked","sendData","payload","isRight","swal","title","text","icon","timer","newIndex","life","push","style","fontSize","onClick","color","size","subTitle","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","background","gradient","ThemeSber","darkSber","GlobalStyle","darkJoy","darkEva","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26bd3935.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport \"../SApp.css\";\r\n\r\n//компонент для отрисовки угадываемого слова\r\nexport const Line = (props) => {\r\n    //ответ (верное слово)\r\n    const word = props.word || \"\";\r\n    //флаг конца отгадывания\r\n    const openedInds = props.indArr;\r\n\r\n    return (\r\n        <span className=\"container\">\r\n            {   \r\n                word.split(\"\").map((item, index) => {\r\n                    var isIn = openedInds.find((element, ind, array) => {\r\n                        return (element - 1) === index;\r\n                    });\r\n                    if (isIn) {\r\n                        return (\r\n                            <label className=\"word\" key={index}>{item}</label>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <label className=\"word\" key={index}>{}</label>\r\n                        );\r\n                    }\r\n                }) \r\n            }\r\n        </span>\r\n    );\r\n} ","import React, {useState, useRef, useEffect} from \"react\";\r\nimport useStateRef from \"react-usestateref\";\r\nimport swal from 'sweetalert';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  AssistantSmartAppCommand\r\n} from \"@sberdevices/assistant-client\";\r\nimport { TextBox, Button } from '@sberdevices/plasma-ui';\r\n\r\nimport \"./SApp.css\";\r\nimport {Line} from './components/Line'\r\n\r\nimport axios from \"axios\";\r\nimport { IconHeart } from \"@sberdevices/plasma-icons\";\r\nimport { setRef } from \"@sberdevices/plasma-core/utils\";\r\nconst API_URL = \"https://shielded-escarpment-91826.herokuapp.com/words/\";\r\n\r\nasync function getWords() {\r\n  const {data: words} = await axios.get(API_URL);\r\n  return words;\r\n}\r\n\r\nasync function updateWords(id, payload) {\r\n  const {data: newWord} = await axios.put(`${API_URL}${id}`, payload);\r\n  return newWord;\r\n}\r\n\r\nconst initializeAssistant = (getState/*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token: process.env.REACT_APP_TOKEN ?? \"\",\r\n      initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\nexport const App = () => {\r\n  //флаг конца отгадывания\r\n  const [words, setWords, wordsRef] = useStateRef([]);\r\n  const [index, setIndex, indexRef] = useStateRef(0);\r\n  const [points, setPoints, pointsRef] = useStateRef(0);\r\n  const [indArr, setArr, indArrRef] = useStateRef([]);\r\n  const assistant = useRef(undefined);\r\n  const assistantType = useRef(\"formal\");\r\n  const [lives, setLives, livesRef] = useStateRef(0);\r\n  \r\n  //инициализирует голосовой ассистент\r\n  useEffect(() => {\r\n    assistant.current = initializeAssistant(() => getStateForAssistant());\r\n    //Осуществляет подписку на событие готовности ассистента к работе.\r\n    assistant.current.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n    //Осуществляет подписку на событие получения данных с бэкенда. \r\n    //Получает команды из appInitialData, если при запуске смартапа не была вызвана команда getInitialData().\r\n    assistant.current.on(\"data\", (event) => {\r\n      if (event.type == \"character\") {\r\n        assistantType.current = event.character.id;\r\n      }\r\n      if(event.assistant){\r\n        if(event.assistant == \"official\"){\r\n          assistantType.current = \"formal\"\r\n        }\r\n        else {\r\n          assistantType.current = \"informal\"\r\n        }\r\n      }\r\n      console.log(`assistant.on(data)`, event);\r\n      const { action } = event;\r\n      dispatchAssistantAction(action);\r\n    });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const fetchAndSetWords = async () => {\r\n      const _words = await getWords();\r\n      _words.sort(() => Math.random() - 0.5);\r\n      console.log(_words);\r\n      setWords(_words);\r\n    }\r\n    fetchAndSetWords();\r\n  }, [])\r\n\r\n  const getStateForAssistant = () => {\r\n    console.log('getStateForAssistant: this.state:', pointsRef?.current)\r\n    const state = {\r\n      item_selector: {\r\n        //Список соответствий между голосовыми командами и действиями в приложении.\r\n        items: {\r\n            word: wordsRef?.current?.[indexRef?.current]?.[\"word\"],\r\n            question: wordsRef?.current?.[indexRef?.current]?.[\"question\"],\r\n            future: wordsRef?.current?.[indexRef?.current + 1]?.[\"question\"],\r\n            point: pointsRef?.current,\r\n            lives: livesRef?.current,\r\n            arr: indArrRef?.current,\r\n            speech: assistantType?.current, \r\n            possibility: pointsRef?.current\r\n          },\r\n      },\r\n    };\r\n    console.log('getStateForAssistant: state:', state)\r\n    return state;\r\n  }\r\n\r\n  //распознает запросы для голосового ассистента\r\n  const dispatchAssistantAction = (action) => {\r\n    console.log('dispatchAssistantAction', action);\r\n      if (action) {\r\n      switch (action.type) {\r\n        case 'guess_word':\r\n          //вызывает функцию в ответ на распознанное действие\r\n          return guess_word(action);\r\n        case 'add_life':\r\n          return add_life();\r\n        case 'open_letter':\r\n          return open_letter(action);  \r\n        case 'init':\r\n          return init();      \r\n        default:\r\n          throw new Error();\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOnClick = (action_id, asked) => {\r\n    console.log(\"START\")\r\n    // Отправка сообщения ассистенту с фронтенд.\r\n    // Структура может меняться на усмотрение разработчика, в зависимости от бэкенд\r\n    assistant?.current?.sendData({ \r\n      action: \r\n        { \r\n          action_id: action_id, \r\n          payload: {\r\n            asked: asked\r\n          } \r\n        }\r\n      });\r\n  };\r\n\r\n  const init = () => {\r\n    handleOnClick('say_question', 'Огласи вопрос')\r\n  }\r\n\r\n  //функция обработчик введенного слова\r\n  const guess_word = (action) => {\r\n    const guessed = action.isRight;\r\n    \r\n    if (guessed === true) {\r\n      swal({title: \"Верно!\", text :`Слово: ${wordsRef?.current?.[indexRef?.current]?.[\"word\"]}`, icon: \"success\", timer: 3000});\r\n      const newIndex = indexRef?.current + 1;\r\n      setIndex(newIndex);\r\n      const point = pointsRef?.current + 1;\r\n      setArr([]);\r\n      setPoints(point);\r\n      handleOnClick('say_question', 'Огласи вопрос')\r\n    } else if (livesRef?.current > 0) {\r\n      let life = livesRef?.current - 1;\r\n      setLives(life);\r\n    }else {\r\n      swal({text: \"Попробуйте снова :(\", icon: \"error\", timer: 3000});\r\n      setPoints(0);\r\n    }\r\n  }\r\n\r\n  const add_life = () => {\r\n      let life = livesRef?.current + 1;\r\n      setLives(life);\r\n      const point = pointsRef?.current - 2;\r\n      setPoints(point);\r\n  }\r\n\r\n  const open_letter = (action) => {\r\n    const id = action.id;\r\n    const arr = indArrRef?.current;\r\n    arr.push(id);\r\n    setArr(arr);\r\n    const point = pointsRef?.current - 1;\r\n    setPoints(point);\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div>\r\n      <label style={\r\n          {fontSize: \"24pt\"}\r\n        }\r\n      >Угаданные подряд: {points}</label>\r\n      <button onClick={() => {handleOnClick('add_life', 'Купить жизнь')}} className=\"shine-button\"><IconHeart color=\"#FF0000\" /><label style={{fontSize: \"24pt\"}}>: {lives}</label></button>\r\n      </div>\r\n      <Line word={wordsRef?.current?.[indexRef?.current]?.[\"word\"]} indArr={indArr}/>\r\n      <TextBox \r\n        title=\"Загадка:\" \r\n        size=\"l\" \r\n        subTitle={wordsRef?.current?.[indexRef?.current]?.[\"question\"]} \r\n        style={\r\n          {margin: \"5% 0 0 0\",\r\n          fontSize: \"24pt\"}\r\n        }/>\r\n    </div>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport { darkSber, darkEva, darkJoy } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeSber = createGlobalStyle(darkSber);\r\nconst ThemeJoy = createGlobalStyle(darkJoy);\r\nconst ThemeEva = createGlobalStyle(darkEva);\r\n\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeSber />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./SApp\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device'; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from './styles/Global'; // Тема оформления (цветовая схема)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}